   0  def fibonacci(var lim: int): void
              [0000, 0000] (0023,                FCDEF) {def}
              [0000, 0004] (0001,                   ID) {fibonacci}
              [0000, 0013] (0019,          PARAMSBEGIN) {(}
              [0000, 0014] (0047,                  VAR) {var}
              [0000, 0018] (0001,                   ID) {lim}
              [0000, 0021] (0028,           TYPEASSIGN) {:}
              [0000, 0023] (0005,              TYPEINT) {int}
              [0000, 0026] (0020,            PARAMSEND) {)}
              [0000, 0027] (0028,           TYPEASSIGN) {:}
              [0000, 0029] (0029,           FCTYPEVOID) {void}
   1  begin
              [0001, 0000] (0021,           BLOCKBEGIN) {begin}
   2  var result: int[] = [0, 1];
              [0002, 0002] (0047,                  VAR) {var}
              [0002, 0006] (0001,                   ID) {result}
              [0002, 0012] (0028,           TYPEASSIGN) {:}
              [0002, 0014] (0005,              TYPEINT) {int}
              [0002, 0017] (0017,           ARRAYBEGIN) {[}
              [0002, 0018] (0018,             ARRAYEND) {]}
              [0002, 0020] (0027,               ASSIGN) {=}
              [0002, 0022] (0017,           ARRAYBEGIN) {[}
              [0002, 0023] (0030,            CONSTLINT) {0}
              [0002, 0024] (0026,            SEPARATOR) {,}
              [0002, 0026] (0030,            CONSTLINT) {1}
              [0002, 0027] (0018,             ARRAYEND) {]}
              [0002, 0028] (0025,              LINEEND) {;}
   3  var i: int = 1;
              [0003, 0002] (0047,                  VAR) {var}
              [0003, 0006] (0001,                   ID) {i}
              [0003, 0007] (0028,           TYPEASSIGN) {:}
              [0003, 0009] (0005,              TYPEINT) {int}
              [0003, 0013] (0027,               ASSIGN) {=}
              [0003, 0015] (0030,            CONSTLINT) {1}
              [0003, 0016] (0025,              LINEEND) {;}
   4  while(result[i-1] + result[i] < lim)
              [0004, 0002] (0046,            LOOPWHILE) {while}
              [0004, 0007] (0019,          PARAMSBEGIN) {(}
              [0004, 0008] (0001,                   ID) {result}
              [0004, 0014] (0017,           ARRAYBEGIN) {[}
              [0004, 0015] (0001,                   ID) {i}
              [0004, 0016] (0008,             OPAMINUS) {-}
              [0004, 0017] (0030,            CONSTLINT) {1}
              [0004, 0018] (0018,             ARRAYEND) {]}
              [0004, 0020] (0007,               OPASUM) {+}
              [0004, 0022] (0001,                   ID) {result}
              [0004, 0028] (0017,           ARRAYBEGIN) {[}
              [0004, 0029] (0001,                   ID) {i}
              [0004, 0030] (0018,             ARRAYEND) {]}
              [0004, 0032] (0011,              OPRLESS) {<}
              [0004, 0034] (0001,                   ID) {lim}
              [0004, 0037] (0020,            PARAMSEND) {)}
   5  begin
              [0005, 0002] (0021,           BLOCKBEGIN) {begin}
   6  i = i + 1;
              [0006, 0004] (0001,                   ID) {i}
              [0006, 0006] (0027,               ASSIGN) {=}
              [0006, 0008] (0001,                   ID) {i}
              [0006, 0010] (0007,               OPASUM) {+}
              [0006, 0012] (0030,            CONSTLINT) {1}
              [0006, 0013] (0025,              LINEEND) {;}
   7  result[i] = result[i-2] + result[i-1];
              [0007, 0004] (0001,                   ID) {result}
              [0007, 0010] (0017,           ARRAYBEGIN) {[}
              [0007, 0011] (0001,                   ID) {i}
              [0007, 0012] (0018,             ARRAYEND) {]}
              [0007, 0014] (0027,               ASSIGN) {=}
              [0007, 0016] (0001,                   ID) {result}
              [0007, 0022] (0017,           ARRAYBEGIN) {[}
              [0007, 0023] (0001,                   ID) {i}
              [0007, 0024] (0008,             OPAMINUS) {-}
              [0007, 0025] (0030,            CONSTLINT) {2}
              [0007, 0026] (0018,             ARRAYEND) {]}
              [0007, 0028] (0007,               OPASUM) {+}
              [0007, 0030] (0001,                   ID) {result}
              [0007, 0036] (0017,           ARRAYBEGIN) {[}
              [0007, 0037] (0001,                   ID) {i}
              [0007, 0038] (0008,             OPAMINUS) {-}
              [0007, 0039] (0030,            CONSTLINT) {1}
              [0007, 0040] (0018,             ARRAYEND) {]}
              [0007, 0041] (0025,              LINEEND) {;}
   8  end
              [0008, 0002] (0022,             BLOCKEND) {end}
   9  var l: int = 0;
              [0009, 0002] (0047,                  VAR) {var}
              [0009, 0006] (0001,                   ID) {l}
              [0009, 0007] (0028,           TYPEASSIGN) {:}
              [0009, 0009] (0005,              TYPEINT) {int}
              [0009, 0013] (0027,               ASSIGN) {=}
              [0009, 0015] (0030,            CONSTLINT) {0}
              [0009, 0016] (0025,              LINEEND) {;}
  10  var step: int = 1;
              [0010, 0002] (0047,                  VAR) {var}
              [0010, 0006] (0001,                   ID) {step}
              [0010, 0010] (0028,           TYPEASSIGN) {:}
              [0010, 0012] (0005,              TYPEINT) {int}
              [0010, 0016] (0027,               ASSIGN) {=}
              [0010, 0018] (0030,            CONSTLINT) {1}
              [0010, 0019] (0025,              LINEEND) {;}
  11  for(l, i, step)
              [0011, 0002] (0045,              LOOPFOR) {for}
              [0011, 0005] (0019,          PARAMSBEGIN) {(}
              [0011, 0006] (0001,                   ID) {l}
              [0011, 0007] (0026,            SEPARATOR) {,}
              [0011, 0009] (0001,                   ID) {i}
              [0011, 0010] (0026,            SEPARATOR) {,}
              [0011, 0012] (0001,                   ID) {step}
              [0011, 0016] (0020,            PARAMSEND) {)}
  12  begin
              [0012, 0002] (0021,           BLOCKBEGIN) {begin}
  13  print("%d ,", result[l]);
              [0013, 0004] (0035,                PRINT) {print}
              [0013, 0009] (0019,          PARAMSBEGIN) {(}
              [0013, 0010] (0031,         CONSTLSTRING) {"%d ,"}
              [0013, 0016] (0026,            SEPARATOR) {,}
              [0013, 0018] (0001,                   ID) {result}
              [0013, 0024] (0017,           ARRAYBEGIN) {[}
              [0013, 0025] (0001,                   ID) {l}
              [0013, 0026] (0018,             ARRAYEND) {]}
              [0013, 0027] (0020,            PARAMSEND) {)}
              [0013, 0028] (0025,              LINEEND) {;}
  14  end
              [0014, 0002] (0022,             BLOCKEND) {end}
  15  end
              [0015, 0000] (0022,             BLOCKEND) {end}
  16  
  17  def init(var args: string[]): int
              [0017, 0000] (0023,                FCDEF) {def}
              [0017, 0004] (0001,                   ID) {init}
              [0017, 0008] (0019,          PARAMSBEGIN) {(}
              [0017, 0009] (0047,                  VAR) {var}
              [0017, 0013] (0001,                   ID) {args}
              [0017, 0017] (0028,           TYPEASSIGN) {:}
              [0017, 0019] (0004,           TYPESTRING) {string}
              [0017, 0025] (0017,           ARRAYBEGIN) {[}
              [0017, 0026] (0018,             ARRAYEND) {]}
              [0017, 0027] (0020,            PARAMSEND) {)}
              [0017, 0028] (0028,           TYPEASSIGN) {:}
              [0017, 0030] (0005,              TYPEINT) {int}
  18  begin
              [0018, 0000] (0021,           BLOCKBEGIN) {begin}
  19  var lim: int;
              [0019, 0002] (0047,                  VAR) {var}
              [0019, 0006] (0001,                   ID) {lim}
              [0019, 0009] (0028,           TYPEASSIGN) {:}
              [0019, 0011] (0005,              TYPEINT) {int}
              [0019, 0014] (0025,              LINEEND) {;}
  20  input(lim);
              [0020, 0002] (0036,                INPUT) {input}
              [0020, 0007] (0019,          PARAMSBEGIN) {(}
              [0020, 0008] (0001,                   ID) {lim}
              [0020, 0011] (0020,            PARAMSEND) {)}
              [0020, 0012] (0025,              LINEEND) {;}
  21  fibonacci(lim);
              [0021, 0002] (0001,                   ID) {fibonacci}
              [0021, 0011] (0019,          PARAMSBEGIN) {(}
              [0021, 0012] (0001,                   ID) {lim}
              [0021, 0015] (0020,            PARAMSEND) {)}
              [0021, 0016] (0025,              LINEEND) {;}
  22  return 0;
              [0022, 0002] (0024,             FCRETURN) {return}
              [0022, 0009] (0030,            CONSTLINT) {0}
              [0022, 0010] (0025,              LINEEND) {;}
  23  end
              [0023, 0000] (0022,             BLOCKEND) {end}
  24  
              [0025, 0001] (0051,                  EOF) {EOF}
